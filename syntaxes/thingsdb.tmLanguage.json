{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "ThingsDB",
	"patterns": [
		{
			"include": "#keywords"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#regexp"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#numbers"
		},
		{
			"include": "#support"
		},
		{
			"match": "\\b(true|false|nil)\\b",
			"name": "constant.language.thingsdb"
		},
		{
			"match": ";",
			"name": "punctuation.terminator.statement.thingsdb"
		}
	],
	"repository": {
		"keywords": {
			"patterns": [{
				"match": "(?<![_$[:alnum:]])(?:(?<=\\.\\.\\.)|(?<!\\.))(if|else|return|for|in|break|continue)(?![_$[:alnum:]])(?:(?=\\.\\.\\.)|(?!\\.))",
				"name": "keyword.control.thingsdb"
			}]
		},
		"tstring-formatting": {
			"patterns": [
				{
					"include": "#tstring-formatting-braces"
				},
				{
					"include": "#tstring-formatting-singe-brace"
				}
			]
		},
		"tstring-formatting-singe-brace": {
			"name": "invalid.illegal.brace.thingsdb",
			"match": "(}(?!}))"
		},
		"tstring-formatting-braces": {
			"patterns": [
				{
					"comment": "empty braces are illegal",
					"match": "({)(\\s*?)(})",
					"captures": {
						"1": {
							"name": "constant.character.format.placeholder.other.thingsdb"
						},
						"2": {
							"name": "invalid.illegal.brace.thingsdb"
						},
						"3": {
							"name": "constant.character.format.placeholder.other.thingsdb"
						}
					}
				},
				{
					"name": "constant.character.escape.thingsdb",
					"match": "({{|}})"
				}
			]
		},
		"tstring-single-brace": {
			"comment": "value interpolation using { ... }",
			"begin": "(\\{)",
			"end": "(?x)\n  (\\})|(?=\\n)\n",
			"beginCaptures": {
				"1": {
					"name": "constant.character.format.placeholder.other.thingsdb"
				}
			},
			"endCaptures": {
				"1": {
					"name": "constant.character.format.placeholder.other.thingsdb"
				}
			},
			"patterns": [
				{
					"include": "#t-expression"
				}
			]
		},
		"tstring-guts": {
			"patterns": [
				{
					"include": "#escape-sequence-unicode"
				},
				{
					"include": "#escape-sequence"
				},
				{
					"include": "#tstring-formatting"
				}
			]
		},
		"tstring-raw-guts": {
			"patterns": [
				{
					"include": "#string-consume-escape"
				},
				{
					"include": "#tstring-formatting"
				}
			]
		},
		"tstring-illegal-single-brace": {
			"comment": "it is illegal to have a multiline brace inside a single-line string",
			"begin": "(\\{)(?=[^\\n}]*$\\n?)",
			"end": "(\\})|(?=\\n)",
			"beginCaptures": {
				"1": {
					"name": "constant.character.format.placeholder.other.thingsdb"
				}
			},
			"endCaptures": {
				"1": {
					"name": "constant.character.format.placeholder.other.thingsdb"
				}
			},
			"patterns": [
				{
					"include": "#tstring-terminator-single"
				},
				{
					"include": "#t-expression"
				}
			]
		},
		"tstring-illegal-multi-brace": {
			"patterns": [
				{
					"include": "#impossible"
				}
			]
		},
		"t-expression": {
			"comment": "All valid ThingsDB expressions, except comments",
			"patterns": [
				{
					"include": "#expression"
				},
				{
					"comment": "Tokenize identifiers to help linters",
					"match": "(?x) \\b ([[:alpha:]_]\\w*) \\b"
				}
			]
		},
		"strings": {
			"patterns": [{
				"name": "string.quoted.single.thingsdb",
				"begin": "(')",
				"end": "(')",
				"beginCaptures": {
					"1": {
						"name": "punctuation.definition.string.begin.thingsdb"
					}
				},
				"endCaptures": {
					"1": {
						"name": "punctuation.definition.string.end.thingsdb"
					}
				}
			}, {
				"name": "string.quoted.double.thingsdb",
				"begin": "(\")",
				"end": "(\")",
				"beginCaptures": {
					"1": {
						"name": "punctuation.definition.string.begin.thingsdb"
					}
				},
				"endCaptures": {
					"1": {
						"name": "punctuation.definition.string.end.thingsdb"
					}
				}
			}, {
				"include": "#template-string"
			}]
		},
		"regexp": {
			"patterns": [
				{
					"name": "constant.regexp.thingsdb",
					"match": "(/[^/\\\\\\n]+(?:\\\\.[^/\\\\]*)*/([ims]*))"
				}
			]
		},
		"comments": {
			"patterns": [{
				"begin": "/\\*",
				"beginCaptures": {
					"0": {
						"name": "punctuation.definition.comment.begin.thingsdb"
					}
				},
				"end": "\\*/",
				"endCaptures": {
					"0": {
						"name": "punctuation.definition.comment.end.thingsdb"
					}
				},
				"name": "comment.block.thingsdb"
			},  {
				"name": "comment.line.double-slash.thingsdb",
				"begin": "//",
				"end": "$"
			}]
		},
		"numbers": {
			"name": "constant.numeric.thingsdb",
			"patterns": [
				{
					"include": "#number-float"
				},
				{
					"include": "#number-dec"
				},
				{
					"include": "#number-hex"
				},
				{
					"include": "#number-oct"
				},
				{
					"include": "#number-bin"
				},
				{
					"include": "#number-long"
				},
				{
					"name": "invalid.illegal.name.thingsdb",
					"match": "\\b[0-9]+\\w+"
				}
			]
		},
		"support": {
			"patterns": [
				{
					"name": "storage.type.function.collection.thingsdb",
					"match": "\\b(alt_raise|assert|base64_encode|base64_decode|bool|bytes|closure|datetime|deep|future|is_future|del_enum|del_type|room|is_room|task|tasks|is_task|is_email|is_url|is_tel|is_time_zone|timeit|enum|enum_info|enum_map|enums_info|err|regex|is_regex|change_id|float|has_enum|has_type|int|is_array|is_ascii|is_bool|is_bytes|is_closure|is_datetime|is_enum|is_err|is_float|is_mpdata|is_inf|is_int|is_list|is_nan|is_nil|is_raw|is_set|is_str|is_thing|is_timeval|is_tuple|is_utf8|json_dump|json_load|list|log|mod_enum|mod_type|new|new_type|now|raise|rand|range|randint|randstr|refs|rename_enum|rename_type|set|set_enum|set_type|str|thing|timeval|try|type|type_assert|type_count|type_info|types_info|nse|wse)\\s*(?=\\()"
				},
				{
					"name": "storage.type.function.node.thingsdb",
					"match": "\\b(backup_info|backups_info|backups_ok|counters|del_backup|has_backup|new_backup|node_info|nodes_info|reset_counters|restart_module|set_log_level|shutdown)\\s*(?=\\()"
				},
				{
					"name": "storage.type.function.thingsdb.thingsdb",
					"match": "\\b(has_module|del_module|module_info|modules_info|new_module|deploy_module|rename_module|refresh_module|set_module_conf|set_module_scope|collection_info|collections_info|del_collection|del_expired|del_node|del_token|del_user|grant|has_collection|has_node|has_token|has_user|new_collection|new_node|new_token|new_user|rename_collection|rename_user|restore|revoke|set_password|set_time_zone|set_default_deep|time_zones_info|user_info|users_info)\\s*(?=\\()"
				},
				{
					"name": "storage.type.function.procedure.thingsdb",
					"match": "\\b(del_procedure|has_procedure|new_procedure|procedure_doc|procedure_info|procedures_info|rename_procedure|run)\\s*(?=\\()"
				},
				{
					"name": "storage.type.function.chain.thingsdb",
					"match": "\\.\\s*(first|last|then|else|load|at|again_in|again_at|err|cancel|closure|set_closure|args|set_args|owner|set_owner|equals|copy|dup|assign|week|weekday|yday|zone|len|call|doc|emit|extract|choice|code|format|msg|each|every|extend|extend_unique|filter|find|find_index|has|index_of|is_unique|unique|join|map|map_id|map_wrap|map_type|vmap|move|pop|push|fill|remove|replace|restrict|restriction|shift|sort|splice|to|add|one|clear|contains|ends_with|name|lower|replace|reverse|starts_with|split|test|trim|trim_left|trim_right|upper|del|ren|to_type|to_thing|get|id|keys|reduce|set|some|value|values|wrap|unshift|unwrap|search)\\s*(?=\\()"
				},
				{
					"name": "storage.type.function.error.thingsdb",
					"match": "\\b(assert_err|auth_err|bad_data_err|cancelled_err|forbidden_err|lookup_err|max_quota_err|node_err|num_arguments_err|operation_err|overflow_err|syntax_err|type_err|value_err|zero_div_err)\\s*(?=\\()"
				},
				{
                    "name": "constant.numeric.privilege.thingsdb",
                    "match": "\\b(FULL|USER|GRANT|CHANGE|JOIN|RUN|QUERY)\\b"
                },
				{
                    "name": "constant.numeric.loglevel.thingsdb",
                    "match": "\\b(DEBUG|INFO|WARNING|ERROR|CRITICAL)\\b"
                },
				{
                    "name": "constant.numeric.returnflags.thingsdb",
                    "match": "\\b(NO_IDS)\\b"
                }

			]
		},
		"number-float": {
			"name": "constant.numeric.float.thingsdb",
			"match": "(?x)\n  (?<! \\w)(?:\n    (?:\n      \\.[0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\. [0-9](?: _?[0-9] )*\n      |\n      [0-9](?: _?[0-9] )* \\.\n    ) (?: [eE][+-]?[0-9](?: _?[0-9] )* )?\n    |\n    [0-9](?: _?[0-9] )* (?: [eE][+-]?[0-9](?: _?[0-9] )* )\n  )([jJ])?\\b\n",
			"captures": {
				"1": {
					"name": "storage.type.imaginary.number.thingsdb"
				}
			}
		},
		"number-dec": {
			"name": "constant.numeric.dec.thingsdb",
			"match": "(?x)\n  (?<![\\w\\.])(?:\n      [1-9](?: _?[0-9] )*\n      |\n      0+\n      |\n      [0-9](?: _?[0-9] )* ([jJ])\n      |\n      0 ([0-9]+)(?![eE\\.])\n  )\\b\n",
			"captures": {
				"1": {
					"name": "storage.type.imaginary.number.thingsdb"
				},
				"2": {
					"name": "invalid.illegal.dec.thingsdb"
				},
				"3": {
					"name": "invalid.illegal.dec.thingsdb"
				}
			}
		},
		"number-hex": {
			"name": "constant.numeric.hex.thingsdb",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[xX]) (_?[0-9a-fA-F])+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.thingsdb"
				}
			}
		},
		"number-oct": {
			"name": "constant.numeric.oct.thingsdb",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[oO]) (_?[0-7])+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.thingsdb"
				}
			}
		},
		"number-bin": {
			"name": "constant.numeric.bin.thingsdb",
			"match": "(?x)\n  (?<![\\w\\.])\n    (0[bB]) (_?[01])+\n  \\b\n",
			"captures": {
				"1": {
					"name": "storage.type.number.thingsdb"
				}
			}
		},
		"template-string": {
			"name": "meta.string.quoted.template.thingsdb",
			"begin": "(`)",
			"end": "(`)",
			"beginCaptures": {
				"1": {
					"name": "punctuation.definition.string.begin.thingsdb"
				}
			},
			"endCaptures": {
				"1": {
					"name": "punctuation.definition.string.end.thingsdb"
				}
			},
			"patterns": [
				{
					"include": "#tstring-guts"
				},
				{
					"include": "#tstring-illegal-single-brace"
				},
				{
					"include": "#tstring-single-brace"
				},
				{
					"include": "#tstring-single-core"
				}
			]
		},
		"tstring-single-core": {
			"name": "string.interpolated.thingsdb",
			"match": "(?x)\n  (.+?)\n    (\n      (?# .* and .*? in multi-line match need special handling of\n        newlines otherwise SublimeText and Atom will match slightly\n        differently.\n\n        The guard for newlines has to be separate from the\n        lookahead because of special $ matching rule.)\n      ($\\n?)\n      |\n      (?=[\\\\\\}\\{]|(`)|((?<!\\\\)\\n))\n    )\n  (?# due to how multiline regexps are matched we need a special case\n    for matching a newline character)\n  | \\n\n"
		},
		"tstring-terminator-single": {
			"patterns": [
				{
					"name": "storage.type.format.thingsdb",
					"match": "(![rsa])(?=})"
				},
				{
					"match": "(?x)\n  (![rsa])?\n    ( : \\w? [<>=^]? [-+ ]? \\#?\n      \\d* ,? (\\.\\d+)? [bcdeEfFgGnosxX%]? )(?=})\n",
					"captures": {
						"1": {
							"name": "storage.type.format.thingsdb"
						},
						"2": {
							"name": "storage.type.format.thingsdb"
						}
					}
				},
				{
					"include": "#tstring-terminator-single-tail"
				}
			]
		},
		"tstring-terminator-single-tail": {
			"begin": "(![rsa])?(:)(?=.*?{)",
			"end": "(?=})|(?=\\n)",
			"beginCaptures": {
				"1": {
					"name": "storage.type.format.thingsdb"
				},
				"2": {
					"name": "storage.type.format.thingsdb"
				}
			},
			"patterns": [
				{
					"include": "#tstring-illegal-single-brace"
				},
				{
					"include": "#tstring-single-brace"
				},
				{
					"name": "storage.type.format.thingsdb",
					"match": "([bcdeEfFgGnosxX%])(?=})"
				},
				{
					"name": "storage.type.format.thingsdb",
					"match": "(\\.\\d+)"
				},
				{
					"name": "storage.type.format.thingsdb",
					"match": "(,)"
				},
				{
					"name": "storage.type.format.thingsdb",
					"match": "(\\d+)"
				},
				{
					"name": "storage.type.format.thingsdb",
					"match": "(\\#)"
				},
				{
					"name": "storage.type.format.thingsdb",
					"match": "([-+ ])"
				},
				{
					"name": "storage.type.format.thingsdb",
					"match": "([<>=^])"
				},
				{
					"name": "storage.type.format.thingsdb",
					"match": "(\\w)"
				}
			]
		}
	},
	"scopeName": "source.ti"
}